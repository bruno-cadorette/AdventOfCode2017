module Main where
import Data.Char
import Control.Applicative
import Data.List
import Data.Maybe
import qualified Data.Map as Map

day1Input = fmap digitToInt



solve n xs = sum $ zipWith (\a b -> if a == b then a else 0) xs (drop n $ cycle xs)
solve1 = solve 1
solve2 xs = solve ((length xs) `div` 2) xs

parseDay2 :: String -> [[Int]]
parseDay2 = fmap (fmap read . words) . lines

solveDay2p1 :: [[Int]] -> Int
solveDay2p1 = sum . fmap (\ys -> maximum ys - minimum ys)

solveDay2p2 :: [[Int]] -> Maybe Int
solveDay2p2 =  fmap sum . traverse sp2
    where
        sp2 xs = fmap (\(a,b) -> max a b `div` min a b) $ listToMaybe $ filter (\(a,b) -> a `mod` b == 0 && a /= b) $ liftA2 (,) xs xs
 

up    (a, b) = (a, b + 1)
down  (a, b) = (a, b - 1)
left  (a, b) = (a - 1, b)
right (a, b) = (a + 1, b)
directions = [right, up, left, down]

day3Gen = scanl (\c f -> f c) (0,0) $ concat $ zipWith replicate steps (cycle directions)
    where
        steps = concat $ zipWith (\a b -> [a,b]) [1..] [1..]
getValue :: Num a => (Integer, Integer) -> Map.Map (Integer, Integer) a -> a
getValue position table = sum $ mapMaybe (\f -> Map.lookup (f position) table) dir
    where 
        dir = directions ++ [\(a,b) -> (a + 1, b + 1), \(a,b) -> (a - 1, b + 1), \(a,b) -> (a + 1, b - 1), \(a,b) -> (a - 1, b - 1)]

setValue table coord = 
    let x = getValue coord table
    in (Map.insert coord x table, x)

day3Part1 = day3Gen !! 361526
day3Part2 = find (> 361527) $ snd $ mapAccumL setValue (Map.singleton (0,0) 1) $ drop 1 day3Gen

main :: IO ()
main = do 
    print (day3Gen !! 361526)
    {-let xs = day1Input
    print $ solve1 xs
    print $ solve2 xs
    day2 <- parseDay2 <$> readFile "day2.txt"
    print (solveDay2p1 day2)
    print (solveDay2p2 day2)-}